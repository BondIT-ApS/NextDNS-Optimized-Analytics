# NextDNS Optimized Analytics - Environment Configuration Template
# Copy this file to .env and fill in your actual values
# Like having a LEGO instruction manual for your configuration! üß±

# =============================================================================
# DATABASE CONFIGURATION (Required)
# =============================================================================
# PostgreSQL database connection settings
POSTGRES_USER=nextdns_user
POSTGRES_PASSWORD=secure_password_here
POSTGRES_DB=nextdns
POSTGRES_HOST=db
POSTGRES_PORT=5432

# =============================================================================
# NEXTDNS API CONFIGURATION (Required for log fetching)
# =============================================================================
# Get these from your NextDNS account at https://my.nextdns.io
# Navigate to: Account Settings -> API Keys

# Your NextDNS API key
API_KEY=your_nextdns_api_key_here

# Your NextDNS profile ID (found in the URL when viewing your profile)
# Example: if your profile URL is https://my.nextdns.io/12345/setup
# then your PROFILE_ID is 12345
PROFILE_ID=your_profile_id_here

# =============================================================================
# APPLICATION AUTHENTICATION (Required)
# =============================================================================
# API key for authenticating with the local API
# Generate a secure random string for this
LOCAL_API_KEY=your_secure_local_api_key_here

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Logging level - controls verbosity of application logs
# DEBUG: Detailed information for debugging (development)
# INFO: General information (production default)
# WARNING: Only warning and error messages
# ERROR: Only error messages
# CRITICAL: Only critical errors
LOG_LEVEL=INFO

# =============================================================================
# DATA FETCHING CONFIGURATION
# =============================================================================
# How often to fetch new DNS logs from NextDNS API (in minutes)
# Default: 60 minutes (1 hour)
# Minimum recommended: 15 minutes
# Maximum recommended: 1440 minutes (24 hours)
FETCH_INTERVAL=60

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================
# Uncomment and modify these if needed

# Custom PostgreSQL port (default: 5432)
# POSTGRES_PORT=5432

# =============================================================================
# DOCKER SPECIFIC
# =============================================================================
# These are used by Docker Compose and typically don't need to be changed

# Backend API URL (used by frontend)
# BACKEND_API_URL=http://backend:5001/api

# =============================================================================
# QUICK START GUIDE
# =============================================================================
# 1. Copy this file to .env: cp .env.template .env
# 2. Edit .env with your actual values:
#    - Set your NextDNS API_KEY and PROFILE_ID
#    - Generate a secure LOCAL_API_KEY
#    - Configure LOG_LEVEL (DEBUG for development, INFO for production)
#    - Set FETCH_INTERVAL (minutes between data fetches)
# 3. Get your NextDNS API key from: https://my.nextdns.io/account
# 4. Find your Profile ID in your NextDNS profile URL
# 5. Run: docker-compose up -d
# 6. Initialize database: cd backend && python manage_db.py init
# 7. Check health: curl http://localhost:5001/health
# 8. View API docs: http://localhost:5001/docs
# 
# üìö Documentation: Check the docs/ folder for detailed guides
# üè• Health monitoring: /health (simple) and /health/detailed (comprehensive)
# üîç Interactive API docs: http://localhost:5001/docs
# 
# =============================================================================
# NEW FEATURES IN v2.0
# =============================================================================
# ‚ú® FastAPI with automatic OpenAPI documentation
# üìä Enhanced logging with configurable levels and database statistics
# ‚è±Ô∏è  Configurable data fetching intervals via FETCH_INTERVAL
# üè• Comprehensive health monitoring with system resource tracking
# üñ•Ô∏è  Real-time server information (CPU, memory, disk, uptime)
# üéØ Type-safe API with Pydantic models and validation
# 
# Health Endpoints:
#   GET /health          - Simple health check (status + healthy boolean)
#   GET /health/detailed - Comprehensive system information
# 
# System Monitoring includes:
#   ‚Ä¢ API and Database health status
#   ‚Ä¢ Total DNS records count
#   ‚Ä¢ CPU, memory, and disk utilization
#   ‚Ä¢ Server platform and architecture info
#   ‚Ä¢ Current configuration (log level, fetch interval)
